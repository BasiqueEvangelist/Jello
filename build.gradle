plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def ENV = System.getenv()

repositories {
    maven { url 'https://maven.wispforest.io' }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url 'https://jitpack.io' }

    repositories {
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }
}

dependencies {

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    include "io.wispforest:owo-sentinel:${project.owo_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config}"){
        exclude(group: "net.fabricmc.fabric-api")
    }

//    modImplementation "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei}"
//    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei}"){
//        exclude(group: "net.fabricmc.fabric-api")
//    }

//    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei}"
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei}"


    modCompileOnly("maven.modrinth:modmenu:${project.modmenu}")
    modLocalRuntime("maven.modrinth:modmenu:${project.modmenu}")

    include "maven.modrinth:better-beds:${project.better_beds}"
    modImplementation("maven.modrinth:better-beds:${project.better_beds}")

    modLocalRuntime("maven.modrinth:ferrite-core:${project.ferrite_core}-fabric")
    modLocalRuntime("maven.modrinth:starlight:${project.starlight}")

    modLocalRuntime("maven.modrinth:lithium:${project.lithium}")

    //TODO: TEMPORARY IMPLEMENTATION
    modImplementation("maven.modrinth:sodium:${project.sodium}")
    modLocalRuntime("maven.modrinth:sodium:${project.sodium}")

    implementation 'org.joml:joml:1.10.2'
    include 'org.joml:joml:1.10.2'

    //include "curse.maven:sheep-consistency-386175:3692536"
    //modImplementation "curse.maven:sheep-consistency-386175:3692536"

    //modImplementation "maven.modrinth:consistencyplus:${project.consistencyplus}"
//    modImplementation("dev.architectury:architectury-fabric:${rootProject.architectury}"){ //:sources"){
//        exclude(group: "net.fabricmc.fabric-api")
//    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                'src/generated/resources'
            ]
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/jello.accesswidener")

    runs {
        clientMixinDebug {
            client()
            name "Client for Mixin Debug"
            vmArg "-Dfabric.dli.config=D:\\Main@@0020Folder\\Develping@@0020Folder\\Modding@@0020Minecraft\\jello\\.gradle\\loom-cache\\launch.cfg"
            vmArg "-Dfabric.dli.env=client"
            vmArg "-Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"
            vmArg "-javaagent:${("C:\\Users\\William\\.gradle\\caches\\modules-2\\files-2.1\\net.fabricmc\\sponge-mixin\\0.11.1+mixin.0.8.5\\151fc9ec23e9507c128bb33e761d88432ec89c7f\\sponge-mixin-0.11.1+mixin.0.8.5.jar")}"
            vmArg "-Dlog4j.configurationFile=${("D:\\Main Folder\\Develping Folder\\Modding Minecraft\\jello\\.gradle\\loom-cache\\log4j.xml")}"
            vmArg "-Dfabric.log.disableAnsi=false"
//            vmArg "-Dowo.uwu=${("yes please")}"
            vmArg "-Dmixin.debug.export=true"

            ideConfigGenerated = true
        }
        datagenClient {
            client()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"

            ideConfigGenerated = true
            runDir "build/datagen"
            source sourceSets.main
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url ENV.MAVEN_URL

            credentials {
                username ENV.MAVEN_USER
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}
